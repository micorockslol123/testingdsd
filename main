
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































if not _G.Bypassed then
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local plr = Players.LocalPlayer
local NextFrame = RunService.Heartbeat
local ForceStop = false
local clonef = clonefunction
local format = clonef(string.format)
local gsub = clonef(string.gsub)
local match = clonef(string.match)
local append = clonef(appendfile)
local Type = clonef(type)
local crunning = clonef(coroutine.running)
local cwrap = clonef(coroutine.wrap)
local cresume = clonef(coroutine.resume)
local cyield = clonef(coroutine.yield)
local c_lose = clonef(coroutine.close)
local Pcall = clonef(pcall)
local Pairs = clonef(pairs)
local Error = clonef(error)
local getnamecallmethod = clonef(getnamecallmethod)
local warn = clonef(warn)
local print = clonef(print)
local loading = clonef(loadstring)
local CoreGui = game:GetService("CoreGui")
function bypass()
local SharedRequires = {}
setmetatable(SharedRequires, {
	__metatable = "Secure",
	__index = function(t, k)
		return rawget(t, k)
	end,
	__newindex = function(t, k, v)
		return rawset(t, k, v)
	end,
})

local names = {
	"TweenService",
	"Workspace",
	"ReplicatedStorage",
	"Players",
	"UserInputService",
	"ScriptContext",
}

setmetatable(names, {
	__metatable = "Locked",
	__index = function(t, k)
		return rawget(t, k)
	end,
	__newindex = function(t, k, v)
		return rawset(t, k, v)
	end,
})

SharedRequires["Services"] = {}

SharedRequires["Services"].DumpServices = function()
	local services = {}
	setmetatable(services, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k)
		end,
		__newindex = function(t, k, v)
			return rawset(t, k, v)
		end,
	})
	for _, index in names do
		local service = game:GetService(index)
		local str = string.gsub(service.Name, " ", "")
		service.Name = str
		table.insert(services, service)
	end
	SharedRequires["Services"] = services
end

SharedRequires["Services"].GetService = function(name: string)
	for _, v in SharedRequires["Services"] do
		if rawequal(name, v.Name) then
			return v
		end
	end
end

SharedRequires["Maid"] = {}

SharedRequires["Maid"].Cleanup = function()
	SharedRequires = {}
	getgenv().Settings = {}
	getgenv().Hooks = {}
	for i, v in getgenv().Connections do
		v:Disconnect()
	end
	getgenv().Connections = {}
	getgenv().States = {}
	getgenv().NpcList = {}
	getgenv().Moblist = {}
end

SharedRequires["Maid"].Setup = function()
	getgenv().NpcList = {}
	getgenv().Settings = { Autofarm = { Toggle = false, Mobs = {}, Position = 10 } }
	getgenv().Hooks = {}
	getgenv().States = { Tweening = false }
	getgenv().Connections = {}

	setmetatable(getgenv().Settings, {
		__metatable = "Locked",
		__index = function(t: table, k)
			return rawget(t, k, val)
		end,
		__newindex = function(t, k)
			return rawset(t, k, val)
		end,
	})
end

SharedRequires["Env"] = {}

SharedRequires["Env"].loadstr = function(link)
	local ref = clonefunction(loadstring)
	return ref(game:HttpGet(link))()
end

SharedRequires["Env"].croutinelib = function()
	local lib = {}
	setmetatable(lib, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k)
		end,
		__newindex = function(t, k, v)
			return rawset(t, k, v)
		end,
	})

	for i, v in coroutine do
		if type(v) == "function" then
			local c = clonefunction(v)
			rawset(lib, i, c)
		end
	end
	return lib
end

SharedRequires["Env"].getnamecallmethod = function()
	local c = clonefunction(getnamecallmethod)
	return c()
end

SharedRequires["Env"].getcallingscript = function()
	local c = clonefunction(getcallingscript)
	return c()
end

SharedRequires["Env"].CallHelper = function(originalFunc)
	return setmetatable({}, {
		__call = function(t, ...)
			return originalFunc(...)
		end,
	})
end

SharedRequires["Env"].SecureCall = function(originalFunc, args)
	local tbl = {}
	setmetatable(tbl, {
		__call = function(t, ...)
			return SharedRequires["Env"].CallHelper(originalFunc)(...)
		end,
	})
	return tbl(args)
end

SharedRequires["Env"].getscriptfromthread = function(thread)
	if not thread or not rawequal(type(thread), "thread") then
		return
	end
	local func = debug.info(thread, 1, "f")
	return getfenv(func).script
end

SharedRequires["Env"].TrampHelper = function(originalFunc, ...)
	setthreadidentity(3)
	local result = originalFunc(...)
	setthreadidentity(3)
	return result
end

SharedRequires["Env"].Protect = function(gui)
    local old;
    -- hook namecall of find first child for out gui ^
end

SharedRequires["Env"].TrampolineCall = function(originalFunc, ...)
	return SharedRequires["Env"].TrampHelper(originalFunc, ...)
end

SharedRequires["Env"].Pcall = function(func, ...)
	local c = clonefunction(pcall)
	return c(func, ...)
end

SharedRequires["Bypasses"] = {}

SharedRequires["Bypasses"].ClearContext = function()
	task.spawn(function()
		while true do
			task.wait()
			for i, v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
				v:Disable()
			end
		end
	end)
end

SharedRequires["Bypasses"].AdonisBypass = function()
	for i, v in getgc() do
		if type(v) ~= "table" then
			continue
		end
	end
end

SharedRequires["Bypasses"].Scan = function()

end

local Services = SharedRequires["Services"]
local Maid = SharedRequires["Maid"]
local LuaEnv = SharedRequires["Env"]
local croutine = LuaEnv.croutinelib()
local SecureCall = SharedRequires["Env"].SecureCall
local getscriptfromthread = SharedRequires["Env"].getscriptfromthread
local getcallingscript = SharedRequires["Env"].getcallingscript
local Pcall = SharedRequires["Env"].Pcall

Maid.Setup()

Services.DumpServices()

local Players = Services.GetService("Players")

local ReplicatedStorage = Services.GetService("ReplicatedStorage")
local UserInputService = Services.GetService("UserInputService")
local TweenService = Services.GetService("TweenService")
local Workspace = Services.GetService("Workspace")
local RunService = Services.GetService("RunService")
local plr = Players.LocalPlayer

Players = Services.GetService("Players")

SecureCall(print, "-----")

SharedRequires["Bypasses"].ClearContext()


function bypass()
    local old
    old = hookfunction(
        getrenv().coroutine.wrap,
        newcclosure(function(self, ...)
            if rawequal(getcallingscript().Name, "Network") then
                local args = { ... }
                local thread
                for i, v in args do
                    if rawequal(type(v),"thread")then
                        thread = v
                        return Pcall(coroutine.close, thread)
                    end
                end
                return Pcall(coroutine.close, thread)
            end
            return old(self, ...)
        end)
    )
end

bypass()

SecureCall(warn,"//: Bypass Loaded (nullisgangster)")

Maid.Cleanup()
end
wait(0.2)
_G.Bypassed = true
end
bypass()
wait(0.1)
if not game.Workspace:FindFirstChild("nullisgangster") then
local safeplacepart = Instance.new("Part", game.Workspace)
safeplacepart.Name = "nullisgangster"
safeplacepart.Size = Vector3.new(50,1,50)
safeplacepart.CFrame = CFrame.new(0,70,0)
safeplacepart.Anchored = true
end
local Lighting = game.Lighting
local RunService = game.RunService
	local function brightFunc()
		Lighting.Brightness = 2
		Lighting.ClockTime = 14
		Lighting.FogEnd = 100000
		Lighting.GlobalShadows = false
		Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
	end

	brightLoop = RunService.RenderStepped:Connect(brightFunc)
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Window = Library:CreateWindow({
    Title = 'V0.5 | Emergency Response: Liberty County | nullisgangster',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})
Library:Notify("Successfully Bypassed Anti Cheat...")
wait(0.4)
if not (game.Players.LocalPlayer.Team.Name == "Police" or game.Players.LocalPlayer.Team.Name == "Sheriff") then
local oldhrpcframe = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
wait(0.3)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-456, 28, -687)
wait(0.5)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-456, 28, -687)
Library:Notify("Purchase Lockpick, RFID Disruptor and Glass Cutter.")
repeat wait() until game.Players.LocalPlayer.Backpack:FindFirstChild("Lockpick") and game.Players.LocalPlayer.Backpack:FindFirstChild("RFID Disruptor") and game.Players.LocalPlayer.Backpack:FindFirstChild("Glass Cutter")
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(oldhrpcframe)
end
wait(0.5)
Library:Notify("Executing Auto Robbery Solver...")
if not _G.ExecutedAutoRobberySolver then
local mouse = game.Players.LocalPlayer:GetMouse()
local vim = Instance.new("VirtualInputManager");
function mouse1click()
 x = mouse.X
 y = mouse.Y
 vim:SendMouseButtonEvent(x, y, 0, true, game, false)
 task.wait()
 vim:SendMouseButtonEvent(x, y, 0, false, game, false)
end
local Players = game:GetService("Players"); local LocalPlayer = Players.LocalPlayer; local ReplicatedStorage = game:GetService("ReplicatedStorage"); local RunService = game:GetService("RunService");
print("ERLC AutoSolver | nullisgangster")
local logging = {}
local function hookgamemenu(child)
    local success, message = pcall(function()
        if child.Name == "GameMenus" and child:IsA("ScreenGui") then
            Library:Notify("Hooked onto GameMenu")
            local GameMenu = child
            local HackingUI = GameMenu:WaitForChild("ATM"):WaitForChild("Hacking")
            local LockpickUI = GameMenu:WaitForChild("Lockpick")
            local RobJewelryUI = GameMenu:WaitForChild("RobJewelry")
            local SafeUI = GameMenu:WaitForChild("Safe")

            local CycleFrame = HackingUI:WaitForChild("CycleFrame")
            local SelectingCodeTextLabel = HackingUI:WaitForChild("SelectingCode")
            -- Listen for ATM hack start
            CycleFrame.DescendantAdded:Connect(function( NewDescendant )
                local success, message = pcall(function()
                    if NewDescendant:IsA("TextLabel") then
                        NewDescendant:GetPropertyChangedSignal("BackgroundColor3"):Connect(function()
                            if NewDescendant.Text == SelectingCodeTextLabel.Text and NewDescendant.BackgroundColor3 ~= Color3.fromRGB(0,0,0) then
                                Library:Notify(NewDescendant.Text)
                                mouse1click()
                            end
                        end)
                    end
                end)
                if not success then
                    Library:Notify(message)
                end
            end)
            -- Listen for new Lockpick UI
            LockpickUI.ChildAdded:Connect(function(child)
                local success, message = pcall(function()
                    if child:IsA("Frame") and child.Name == "Pick" then
                        local LockNumber = 1
                        task.wait(0.2)
                        Library:Notify("Detected Lockpick robbery, proceeding...")
                        local StartTime = tick()
                        while true do
                            local TargetLock = child:WaitForChild(tostring(LockNumber))
                            local Half = TargetLock.Size.Y.Scale / 2

                            local LockPositionY = TargetLock.Position.Y.Scale
                            if math.abs(LockPositionY - 0.5) <= ( Half - 0.01 ) then
                                mouse1click()
                                Library:Notify("Pin "..tostring(LockNumber).." finished, diff "..tostring(math.abs(LockPositionY - 0.5)).." min "..tostring(Half - 0.01).." ")
                                if LockNumber >= 6 then
                                    Library:Notify("Finished Lockpick robbery in "..tostring(tick() - StartTime).." seconds")
                                    break
                                end
                                LockNumber += 1
                            end

                            task.wait(0.0005)
                        end
                    end
                end)
                if not success then
                    Library:Notify("Error occured while doing Lockpick: "..message)
                end
            end)
            -- Listening for drill
            RobJewelryUI.ChildAdded:Connect(function( child )
                local success, message = pcall(function()
                    if child.Name == "Drill" and child:IsA("Frame") then
                        -- Start drilling
                        Library:Notify("Jewelery robbery detected waiting for user to start drilling...")
                        repeat RunService.RenderStepped:Wait() until child.Bar.Position ~= UDim2.new(0.5,-2,0,0)
                        -- Keep bar in center until frame disappears
                        Library:Notify("Starting, keep cursor in window.")
                        repeat
                            if child.Bar.Position.X.Scale < 0.5 then
                                mouse1press()
                                repeat
                                    task.wait(0.0005)
                                until child.Bar.Position.X.Scale > 0.5
                                mouse1release()
                            end
                            task.wait(0.0005)
                        until RobJewelryUI.Position ~= UDim2.new(0.5, 0, 0.5, 0)
                        Library:Notify("Jewelery robbery finished.")
                    end
                end)
                if not success then
                    Library:Notify("Error occured while doing Jewelery robbery: "..message)
                end
            end)
            -- Listening for safe
            SafeUI.ChildAdded:Connect(function( child )
                local success, message = pcall(function()
                    if child:IsA("Frame") and child.Name == "Safe" then
                        Library:Notify("Safe robbery detected, starting...")
                        local StartTime = tick()
                        -- Listen for dial rotation
                        task.wait(2)
                        repeat
                            local success, message = pcall(function()
                                local Rotation = child.Dial.Rotation
                                local TargetNumber = tonumber(SafeUI["Top2"]["TargetNum"].Text)

                                local CurrentNumber = (math.abs(Rotation) % 360)/36*10
                                if Rotation > 0 then
                                    CurrentNumber = 100 - CurrentNumber
                                end
                                if math.abs(CurrentNumber - TargetNumber) <= 1 then
                                    mouse1click()
                                    Library:Notify("Cracked safe number landed at "..tostring(CurrentNumber).."target "..tostring(TargetNumber).." raw rotation "..tostring(Rotation))
                                    task.wait(1)
                                end
                            end)
                            if not success then
                                Library:Notify("Error occured while doing Safe robbery: "..message)
                            end
                            task.wait(0.0005)
                        until SafeUI.Position ~= UDim2.new(0.5, 0, 0.5, 0)
                        Library:Notify("Completed safe robbery in "..tostring(tick() - StartTime).." seconds.")
                    end
                end)
                if not success then
                    Library:Notify("Error occured while doing Safe robbery: "..message)
                end
            end)
        end
    end)
    if not success then
        Library:Notify("Error occured while hooking onto gamemenu: "..message)
    end
end
hookgamemenu(LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("GameMenus"))
LocalPlayer:WaitForChild("PlayerGui").ChildAdded:Connect(hookgamemenu)
_G.ExecutedAutoRobberySolver = true
end
Library:Notify("Successfully Executed Auto Robbery Solver, Executing Main Script...")
wait(0.5)
_G.DisableDetections = false
local Core = {
    StaminaHook = function() end
}
Core.TLDetections = {}
local LocalPlayer = game.Players.LocalPlayer
local ReplicatedStorage = game.ReplicatedStorage
function GetVehicle()
    local Vehicle;
    for i,v in next, game:GetService("Workspace").Vehicles:GetChildren() do
        if v["Control_Values"].Owner.Value == game.Players.LocalPlayer.Name then
            Vehicle = v
        end
    end
    if game.Players.LocalPlayer.Character.Humanoid.Sit == true and Vehicle == nil then
        Vehicle = game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent
        end
    return Vehicle
end
local Tabs = {
    Main = Window:AddTab('Main'),
    AutoArrest = Window:AddTab('Auto Arrest'),
    Visuals = Window:AddTab('Visuals'),
    GunMods = Window:AddTab('Gun Mods'),
    Teleports = Window:AddTab('Teleports'),
    VehicleMods = Window:AddTab('Vehicle Mods'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Bypasses')

local LeftGroupBox66 = Tabs.AutoArrest:AddLeftGroupbox('Arrest Aura (OP)')

local LeftGroupBox2 = Tabs.VehicleMods:AddLeftGroupbox('Car Mods')

local LeftGroupBox15 = Tabs.Teleports:AddLeftGroupbox('Locations')

local RightGroupBox15 = Tabs.Teleports:AddRightGroupbox('Locations (With Car)')

local LeftGroupBox16 = Tabs.Visuals:AddLeftGroupbox('Esp')

local LeftGroupBox18 = Tabs.GunMods:AddLeftGroupbox('Mod Your Gun')

_G.Enabled = false
_G.Enabled2 = false
local Client = {}
local Utils = {}
local teamColors = {
    Civilian = Color3.new(1, 1, 1),   -- White
    DOT = Color3.new(1, 0.5, 0),       -- Orange
    Fire = Color3.new(1, 0, 0),        -- Red
    Jail = Color3.new(0, 0, 0),        -- Black
    Police = Color3.new(0, 0, 1),      -- Blue
    Sheriff = Color3.new(0, 0, 0.5)    -- Dark Blue
}

local function createESP(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character ~= game.Players.LocalPlayer.Character then
        local teamName = player.Team and player.Team.Name
        local highlightColor = teamColors[teamName]

        -- Remove existing ESP if it exists
        if player.Character:FindFirstChild("ESP") then
            player.Character.ESP:Destroy()
        end



        -- Create new ESP
        local esphighlight = Instance.new("Highlight", player.Character)
        esphighlight.Name = "ESP"
        esphighlight.FillColor = highlightColor
    end
end

local function updateESP(player)
    if _G.Enabled and player then
        createESP(player)
    elseif player and player.Character then
        if player.Character:FindFirstChild("ESP") then
            player.Character.ESP:Destroy() -- Remove ESP if disabled
        end
    end
end
function Utils.FindTable(Table, Name)
    assert(type(Table) == "table", "Utils.FindTable :: Parsed 'Table' value is invalid")
    assert(typeof(Name) == "string", "Utils.FindTable :: Parsed 'Name' value is invalid")

    for i,v in next, Table do
        if v.Name == Name or i == Name then
            return v
        end
    end
end
Client.LocationName = {"Waterfall", "Family Jewels", "Park", "Hideout", "Sheriff's Office", "Gas Station", "Vine/Lee Street", "Prison", "Barn", "Highway Base", "Police Station", "Hospital/Shopping", "Spawn", "Fire Department", "Trap Door", "Suburb 1/S", "Suburb 1/N", "Parking Garage", "Safe Place"}
Client.StoreName = {"Tool Store", "Gun Shop"}
Client.AtmName = {"ATM - Powerplant", "ATM - Police", "ATM - Parking Garage", "ATM - Sandstone RD", "ATM - Jewelry Store", "ATM - Back Alley"}
Client.Locations = {
    {Name = "Park", CFrame = CFrame.new(-42, 25.5, 125)},
    {Name = "Tool Store", CFrame = CFrame.new(-445.469, 25.748, -725.23)},
    {Name = "Sheriff's Office", CFrame = CFrame.new(-811.273, 24.564, -734.794)},
    {Name = "Vine/Lee Street", CFrame = CFrame.new(1153.729, 4.2, -990.147)},
    {Name = "Prison", CFrame = CFrame.new(1339.721, 3.388, -339.662)},
    {Name = "Barn", CFrame = CFrame.new(820.018, 3.128, -1111.422)},
    {Name = "Highway Base", CFrame = CFrame.new(1086.582, 3.698, 126.127)},
    {Name = "Police Station", CFrame = CFrame.new(709.943, 4.2, -145.204)},
    {Name = "Hospital/Shopping", CFrame = CFrame.new(-213.83, 23.241, -447.743)},
    {Name = "Spawn", CFrame = CFrame.new(-481.569, 23.948, 701.996)},
    {Name = "Fire Department", CFrame = CFrame.new(-992.167, 23.748, 51.318)},
    {Name = "Gas Station", CFrame = CFrame.new(683.253, 4.2, -1532.65)},
    {Name = "Waterfall", CFrame = CFrame.new(411, -7.5, 824)},
    {Name = "Gun Shop", CFrame = CFrame.new(-1249.954, 23.748, -197.149)},
    {Name = "Trap Door", CFrame = CFrame.new(-1358.151, 0.715, -1233.165)},
    {Name = "Suburb 1/S", CFrame = CFrame.new(-676.6, -9.238, -1518.6)},
    {Name = "Parking Garage", CFrame = CFrame.new(-334.47, 23.748, 283.728)},
    {Name = "Suburb 1/N", CFrame = CFrame.new(-184.233, -9.268, -1560.8)},
    {Name = "Family Jewels", CFrame = CFrame.new(-464, 25.25, -409)},
    {Name = "ATM - Powerplant", CFrame = CFrame.new(808.207, 4.446, 376.697)},
    {Name = "ATM - Police", CFrame = CFrame.new(1007.8, 4, -23.4)},
    {Name = "ATM - Parking Garage", CFrame = CFrame.new(-372.339, 23.748, 147.836)},
    {Name = "ATM - Sandstone RD", CFrame = CFrame.new(-863.892, 24.496, 420.545)},
    {Name = "ATM - Jewelry Store", CFrame = CFrame.new(-585.065, 24.496, -405.526)},
    {Name = "ATM - Back Alley", CFrame = CFrame.new(-470.591, 24.496, 387.245)},
    {Name = "Tool Store Inside", CFrame = CFrame.new(-437.03, 25.748, -710)},
    {Name = "Hideout", CFrame = CFrame.new(857, 4.5, 832)},
    {Name = "Safe Place", CFrame = CFrame.new(game.Workspace.nullisgangster.CFrame.Position.X,game.Workspace.nullisgangster.CFrame.Position.Y + 10,game.Workspace.nullisgangster.CFrame.Position.Z)}
}

table.sort(Client.LocationName, function(a, b) return a < b end)
table.sort(Client.StoreName, function(a, b) return a < b end)
table.sort(Client.AtmName, function(a, b) return a < b end)
LeftGroupBox:AddToggle('AntiFall', {
    Text = 'Anti Fall',
    Default = false, -- Default value (true / false)
    Tooltip = 'Prevents you from Falling and taking Damage.', -- Information shown when you hover over the toggle

    Callback = function(Value)
        _G.AntiFall = Value
        while _G.AntiFall do
if game.Players.LocalPlayer.Character:FindFirstChild("Downed Handler") then
        game.Players.LocalPlayer.Character:FindFirstChild("Downed Handler"):Destroy()
        game.Players.LocalPlayer.Character:FindFirstChild("Ragdoll"):Destroy()
        game.Players.LocalPlayer.Character:FindFirstChild("DamageHandler"):Destroy()
end
task.wait()
        end
        if _G.AntiFall == false then
game:GetService("ReplicatedStorage").FE.ResetCharacter:FireServer()
    end
    end
})
LeftGroupBox:AddToggle('AntiDrown', {
    Text = 'Anti Drown',
    Default = false, -- Default value (true / false)
    Tooltip = 'Prevents you from Drowning.', -- Information shown when you hover over the toggle

    Callback = function(Value)
        _G.AntiDrown = Value
        while _G.AntiDrown do
if game.Players.LocalPlayer.Character:FindFirstChild("Head") then
    if game.Players.LocalPlayer.Character.Head:FindFirstChild("BreathUI") then
        game.Players.LocalPlayer.Character.Head.BreathUI:Destroy()
    end
            if _G.AntiDrown == false then
game:GetService("ReplicatedStorage").FE.ResetCharacter:FireServer()
    end
end
task.wait()
        end
    end
})
LeftGroupBox66:AddToggle('AutoArrest', {
    Text = 'Auto Arrest',
    Default = false, -- Default value (true / false)
    Tooltip = 'Automatically Arrests all nearby and far away Criminals.', -- Information shown when you hover over the toggle

    Callback = function(Value)
        _G.Enabled2 = Value
print(_G.Enabled2)
if not game.Players.LocalPlayer.Team.Name == "Police" then
Library:Notify("Join the Police team to use Auto Arrest.")
return
    else
--local count = 0
local Players = game.Players
local RunService = game.RunService
local ReplicatedStorage = game.ReplicatedStorage
while _G.Enabled2 do
    for _, player in ipairs(Players:GetPlayers()) do
        if player:FindFirstChild("Is_Wanted") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            if player.Character.Humanoid.Health >= 10 then
            _G.foundWanted = true  -- At least one wanted player found
--count = 0
            coroutine.wrap(function()
                repeat
                   RunService.RenderStepped:Wait()
                   if player.Character ~= nil and player.Character:FindFirstChild("HumanoidRootPart") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.CFrame.Position.X,player.Character.HumanoidRootPart.CFrame.Position.Y + 5,player.Character.HumanoidRootPart.CFrame.Position.Z)
                        if player.Character.Humanoid.SeatPart then
                        ReplicatedStorage.FE.Eject:FireServer(player.Character, player.Character.Humanoid.SeatPart.Parent)
                        ReplicatedStorage.FE.UseHandcuffs:InvokeServer("Handcuff", player)
                        ReplicatedStorage.FE.UseHandcuffs:InvokeServer("Arrest", player)
                        end
                        ReplicatedStorage.FE.UseHandcuffs:InvokeServer("Handcuff", player)
                        ReplicatedStorage.FE.UseHandcuffs:InvokeServer("Arrest", player)
                end
                until not player:FindFirstChild("Is_Wanted") or player.Team.Name == "Jail"  -- Stop when the player is no longer wanted
            _G.FoundWanted = false
            end)()
            end
        end
--[[if not _G.foundWanted then
        wait(1)
        print(count)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.nullisgangster.CFrame.Position.X,game.Workspace.nullisgangster.CFrame.Position.Y + 10,game.Workspace.nullisgangster.CFrame.Position.Z)
        count = count + 1
end
]]
wait()
end
end
--[[
repeat wait() until count == 30
local Player = game.Players.LocalPlayer    
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place,_id = game.PlaceId, game.JobId
-- Asc for lowest player count, Desc for highest player count
local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=10"
function ListServers(cursor)
   local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
   return Http:JSONDecode(Raw)
end
-- choose a random server and join every 2 minutes
while wait() do
   local Servers = ListServers()
   local Server = Servers.data[math.random(1,#Servers.data)]
   TPS:TeleportToPlaceInstance(_place, Server.id, Player)
end
]]
end
    end
})

local MyButton9 = LeftGroupBox18:AddButton({
    Text = 'Mod Guns (OP)',
    Func = function()
        if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") then
            game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Parent = game.Players.LocalPlayer.Backpack
            end
Library:Notify("Gun Mods applied, equip your gun.")
for i,v in game.ReplicatedStorage.Shared.WeaponStats:GetChildren() do
        local GunSettings = require(v)
        GunSettings.Damage = 50
GunSettings.FireRate = 0.01
GunSettings.AimSpeed = 15
GunSettings.ReloadSpeed = 0.01
GunSettings.ClipAmmo = 1000
GunSettings.TotalAmmo = 1000
GunSettings.WeaponType = 'Assault Rifle'
    end
    end,
    DoubleClick = false,
    Tooltip = 'Mods any Gun to make it OP.'
})

LeftGroupBox15:AddDropdown('Locations', {
    Values = Client.LocationName,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Teleport To A Location',
    Tooltip = 'Teleports you to a Location.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
local LocationData = Utils.FindTable(Client.Locations, Value)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = LocationData.CFrame
    end
})
LeftGroupBox15:AddDropdown('Store', {
    Values = Client.StoreName,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Teleport To A Store',
    Tooltip = 'Teleports you to a Store.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
local LocationData = Utils.FindTable(Client.Locations, Value)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = LocationData.CFrame
    end
})
LeftGroupBox15:AddDropdown('ATMs', {
    Values = Client.AtmName,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Teleport To An ATM',
    Tooltip = 'Teleports you to an ATM.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
local LocationData = Utils.FindTable(Client.Locations, Value)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = LocationData.CFrame
    end
})
LeftGroupBox15:AddDropdown('PlayerTeleport', {
    SpecialType = 'Player',
    Text = 'Teleport To A Player',
    Tooltip = 'Teleports you to a Player.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        local PlayerTarget = game.Players:FindFirstChild(Value)
        if PlayerTarget:FindFirstChild("HumanoidRootPart") then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(PlayerTarget.Character.HumanoidRootPart.CFrame)
end
    end
})
RightGroupBox15:AddDropdown('Locations2', {
    Values = Client.LocationName,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Teleport To A Location',
    Tooltip = 'Teleports you to a Location.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
local LocationData = Utils.FindTable(Client.Locations, Value)
GetVehicle():SetPrimaryPartCFrame(LocationData.CFrame)
    end
})
RightGroupBox15:AddDropdown('Store2', {
    Values = Client.StoreName,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Teleport To A Store',
    Tooltip = 'Teleports you to a Store.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
local LocationData = Utils.FindTable(Client.Locations, Value)
GetVehicle():SetPrimaryPartCFrame(LocationData.CFrame)
    end
})
RightGroupBox15:AddDropdown('ATMs2', {
    Values = Client.AtmName,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Teleport To An ATM',
    Tooltip = 'Teleports you to an ATM.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
local LocationData = Utils.FindTable(Client.Locations, Value)
GetVehicle():SetPrimaryPartCFrame(LocationData.CFrame)
    end
})
RightGroupBox15:AddDropdown('PlayerTeleport2', {
    SpecialType = 'Player',
    Text = 'Teleport To A Player',
    Tooltip = 'Teleports you to a Player.', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        local PlayerTarget = game.Players:FindFirstChild(Value)
        if PlayerTarget:FindFirstChild("HumanoidRootPart") then
GetVehicle():SetPrimaryPartCFrame(CFrame.new(PlayerTarget.Character.HumanoidRootPart.CFrame))
end
    end
})
local MyButton6 = LeftGroupBox2:AddButton({
    Text = 'Mod Vehicle',
    Func = function()
local Vehicle = GetVehicle()
    if not Vehicle then
        return;
    end
Library:Notify("Get out of your car and enter it again for the mod to apply.")
    local Drive = require(Vehicle["Drive Controller"])
    Drive.Horsepower = 3500
    Drive.FinalDrive = 1
    Drive.RevAccel = 3000
    Drive.FAntiRoll = 1000
    Drive.CanDrift = true
    Drive.RBrakeForce = 10000
    Drive.FBrakeForce = 10500
    Drive.PBrakeFrce = 10000
    end,
    DoubleClick = false,
    Tooltip = 'Mods your Vehicle.'
})
LeftGroupBox2:AddToggle('DisableSpeedTraps', {
    Text = 'Disable Speed Traps',
    Default = false, -- Default value (true / false)
    Tooltip = 'Disables all of the Speed Traps.', -- Information shown when you hover over the toggle

    Callback = function(Value)
        _G.DisableDetections = Value
    if _G.DisableDetections then
        for i,v in next, game:GetService("Workspace")["Traffic Lights"]:GetChildren() do
            if v:FindFirstChild("Detection") then
                Core.TLDetections[#Core.TLDetections + 1] = {Object = v.Detection, Parent = v}
                v.Detection.Parent = nil
            end
        end
        Core.TLDetections["SpeedTraps"] = workspace.TrafficDetections.SpeedTraps
        workspace.TrafficDetections.SpeedTraps.Parent = nil
        Core.TLDetections["EvasionDetections"] = workspace.TrafficDetections.EvasionDetections
        workspace.TrafficDetections.EvasionDetections.Parent = nil
    else
        for i,v in next, Core.TLDetections do
            if type(v) == "table" then
                v.Object.Parent = v.Parent
            else
                v.Parent = workspace.TrafficDetections
                v.Parent = workspace.TrafficDetections
            end
        end
    end
    end
})

LeftGroupBox16:AddToggle('Esp', {
    Text = 'Toggle Team Based Esp',
    Default = false, -- Default value (true / false)
    Tooltip = 'Toggles Esp.', -- Information shown when you hover over the toggle

    Callback = function(Value)
_G.Enabled = Value

-- Connect to PlayerAdded and CharacterAdded events
game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        updateESP(player)
    end)
    player.CharacterAdded:Wait()
    updateESP(player)
end)

for _, player in ipairs(game.Players:GetChildren()) do
    player.CharacterAdded:Connect(function()
        repeat wait() until player.Character:FindFirstChild("HumanoidRootPart")
        updateESP(player)
    end)
    
    updateESP(player)
end

    end
})


Library:OnUnload(function()
    print('Unloaded!')
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('nullisgangster')
SaveManager:SetFolder('nullisgangster/emergencyresponselibertycounty')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
Library:Notify("Successfully Executed Script, Made By nullisgangster.")
wait(0.1)
Library:Notify('This script supports Jewelery, ATMs, Safes, and Lockpicks.')
wait(0.1)
Library:Notify('Infinite Stamina Activated.')
game:GetService("Players").LocalPlayer.PlayerGui.GameGui.MainHUD.Values.CurrStamina:GetPropertyChangedSignal("Value"):Connect(function()
            if game:GetService("Players").LocalPlayer.PlayerGui.GameGui.MainHUD.Values.CurrStamina.Value ~= 100 then
            game:GetService("Players").LocalPlayer.PlayerGui.GameGui.MainHUD.Values.CurrStamina.Value = 100
        end
end)














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































print("a")
